import html
import time
import os
from flask import Flask, flash, request, redirect, url_for, render_template, Response
from werkzeug.utils import secure_filename
from flask import send_from_directory , Markup, send_file
import subprocess
import pickle
from redis import Redis
import rq
import ntpath
import Phanns_f
import ann_config
from keras.models import load_model
import tensorflow as tf
from flask_socketio import SocketIO, emit
from random import *


ROOT_FOLDER = os.path.dirname(os.path.realpath(__file__)) 
UPLOAD_FOLDER = ROOT_FOLDER + '/uploads'
ALLOWED_EXTENSIONS = set(['txt', 'faa', 'fasta', 'gif', 'fa'])
import urllib
os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"   # see issue #152
os.environ["CUDA_VISIBLE_DEVICES"] = ""

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
#app.config['APPLICATION_ROOT']='/adrian_net'
#app.config['APPLICATION_ROOT']='/phanns'
app.config['APPLICATION_ROOT']=''
PREFIX=app.config['APPLICATION_ROOT'] 
#model =  load_model( 'deca_model/single.h5')
graph = tf.get_default_graph()

def fix_url_for(path, **kwargs):
    return PREFIX + url_for(path, **kwargs)
#    return url_for(path, **kwargs)

#make fix_url_for available in tamplates
@app.context_processor
def contex():
    return dict(fix_url_for = fix_url_for)

#add the sorable attribute to tables generated by pandas
@app.template_filter('sorttable')
def sorttable_filter(s):
    s= s.replace('table id=','table class="sortable" id=')
    return s


def return_html_table(filename):
    cmd = ["python" , "run_tri_model.py" , app.config['UPLOAD_FOLDER'] + '/' + filename]
    p = subprocess.Popen(cmd, stdout = subprocess.PIPE,
                         stderr=subprocess.PIPE,
                         stdin=subprocess.PIPE)
    out,err = p.communicate()
    print(err)
    return out


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


#@app.route('/bar/<filename>')
@app.route('/uploads/<filename>')
def bar(filename):
#    if os.path.exists('saves/'+filename):
#        return redirect(fix_url_for('show_file',filename=filename))
#    else:
        print(filename)
        return render_template('loading_t.html',filename=filename)


#@app.route('/progress/<filename>')
def progress2(filename):
    #yield "data:0" + "\n\n"
    #yield "event:url" + "\n" + "data:'http://0.0.0.0:8080/upload'" + "\n\n"
    
    
    #yield "event: url\ndata: {\"url\":\"http://0.0.0.0:8080/upload\"}\n\n"
    queue = rq.Queue('microblog-tasks', connection=Redis.from_url('redis://'))
    job = queue.enqueue('run_tri_model_app.entrypoint','uploads/'+filename,job_timeout=3000000)
    
    def generate():
        data=1
        seq_total=1
        while data < 100:
            job.refresh()
            try:
                seq_total=job.meta['total']
            except:
                seq_total=1
            try:
                seq_current=job.meta['current']
            except:
                seq_current=0
            data=(seq_current/seq_total) * 100
            yield "event: update\ndata:" + str(data) + "\n\n"
            time.sleep(0.2)
            print(data)
        table_string=None
        model_is_running=None
        while model_is_running is None:
            try:
                job.refresh()
                model_is_running=job.meta['running']
            except:
                time.sleep(0.5)
            else:
                yield "event: running\ndata:" + str(model_is_running) + "\n\n"
        while not job.is_finished:
            time.sleep(1)
#        yield "event: url\ndata: {\"url\":\"http://0.0.0.0:8080/saves" + '/' + filename + "\"}\n\n"
        with app.app_context(), app.test_request_context():
            yield "event: url\ndata: {\"url\":\"" + url_for('show_file',filename=filename) +"\"}\n\n"
#        with app.app_context(), app.test_request_context():
#            print("data:" + fix_url_for('show_file',filename=filename)  + "\n\n")
    
    return Response(generate(), mimetype= 'text/event-stream')

@app.route('/progress2/<filename>')
def progress(filename):
    def generate():
        test=Phanns_f.ann_result('uploads/'+filename)
        test.predict_score_test()
        with app.app_context(), app.test_request_context():
            #yield "event: url\ndata: {\"url\":\"" + url_for('show_file',filename=filename) +"\"}\n\n"
            emit('url',{'data': "url\":\"" + url_for('show_file',filename=filename) +"\"" })
    
    return Response(generate(), mimetype= 'text/event-stream')

#@app.route('/progress/<filename>')
#@socketio.on('connect', namespace='/test')
#def progress(filename):
#    test=Phanns_f.ann_result('uploads/'+filename)
#    test.predict_score_test()
#    with app.app_context(), app.test_request_context():
#        emit('url',{'data': "url\":\"" + url_for('show_file',filename=filename) +"\"" })

@app.route('/test_io')
def test_io():
    return render_template('loading_t.html')
    
@socketio.on('my event')
def handle_my_custom_event(json, methods=['GET', 'POST']):
    print('received my event: ' + str(json))
    #socketio.emit('my response', json, callback=messageReceived)
    xx = randint(1, 100)
    socketio.emit('set bar', {'data': xx},room=request.sid)

@app.route('/test')
def test_template():
    test=Phanns_f.ann_result('test.fasta')
    test.predict_score_test()
    #(names,features)=test.extract_n()
    #yhats_v=ann_config.models.predict(features)
#    global graph
#    with graph.as_default():
#        yhats_v=model.predict(features)
    return test.html_table

@app.route('/', methods=['GET', 'POST'])
@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part')
         #   return redirect()
        file = request.files['file']
        # if user does not select file, browser also
        # submit an empty part without filename
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
#            print( fix_url_for('bar',filename=filename))
            return redirect(url_for('bar',filename=filename))
#    print( fix_url_for('upload_file'))
    return render_template('main.html')

@app.route('/about')
def about():
    return render_template('about.html', title='about')

#@app.route('/uploads/<filename>')
def uploaded_file(filename):
    table_code_raw= Markup(return_html_table(filename).decode('utf8'))
    table=render_template('index.html', table_code= table_code_raw)
    pickle.dump(table_code_raw,open('saves/' + filename,"wb"))
    return table

@app.route('/saves/<filename>')
def show_file(filename):
    table_code_raw=pickle.load(open('saves/' + filename,"rb"))
    return render_template('index.html', table_code= table_code_raw, csv_table=os.path.splitext(ntpath.basename(filename))[0] + '.csv', filename_base=ntpath.basename(filename))

@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                               'favicon.ico', mimetype='image/vnd.microsoft.icon')


@app.route('/tri_p.h5')
def model_file():
    return send_file('tri_p_model/tri_p.h5')


@app.route('/csv_saves/<filename>')
def return_csv(filename):
	try:
		return send_file('csv_saves/' + filename)
	except Exception as e:
		return str(e)

if __name__ == "__main__":
    #app.run(debug=True, host="0.0.0.0", port=8080)
    #app.run(host="0.0.0.0", port=8080)
    #socketio.run(app)
    socketio.run(app, debug=True)
